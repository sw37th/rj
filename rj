#!/usr/bin/env python3
"""Record the TV program by JOB scheduler

Usage:
  rj add [-r|--repeat <TYPE>] CH NAME DATE TIME [RECORDINGTIME]
  rj del JOBID [JOBID...]
  rj list [DATE]
  rj show JOBID
  rj modbegin JOBID (DELTATIME | DATE TIME)
  rj modrectime JOBID RECORDINGTIME
  rj modch JOBID CH
  rj modname JOBID NAME
  rj setrep JOBID TYPE
  rj listch rj -h | --help

Options:
  -h --help            :show this screen.
  -r --repeat <TYPE>   :set repeat flag. TYPE can specify 'weekly', 'daily', 'weekday', 'asadora'

"""

from datetime import datetime, timedelta
#from docopt import docopt
import argparse
import cliutil
import importlib
import rjsched
import re
import sys
import time

# day_change_hour: 一日の基準時刻(時)
# 当日の基準時刻から翌日の基準時刻-1secまでを同一日とみなす。
# day_change_hour=5の場合、05:00:00-28:59:59が同一日。
day_change_hour = 5

# wormup_sec: 録画開始のマージン
# ジョブがスタートしてから実際に録画開始されるまでタイムラグがあるため
# 指定時刻よりwormup_sec秒だけ早くジョブを開始する。
wormup_sec = 30

# default_rectime: デフォルトの録画時間
default_rectime = '00:29:30'

#scheduler = "Torque"
#scheduler = "Systemd"
scheduler = "Openpbs"

def print_joblist(jobinfo, dateline=0, wormup=0, date=None):
    """
    ジョブの配列を受け取り一覧表示する
    """
    repeat_state = {
        'WEEKLY':  'W',
        'DAILY':   'D',
        'WEEKDAY': 'Wd',
        'ASADORA': 'A',
        'ONESHOT': '',
    }

    if date:
        # 指定された日に録画を開始するジョブの情報のみ抽出
        date_begin = datetime(date.year, date.month, date.day, dateline)
        date_end = date_begin + timedelta(days=1)
        jobinfo = [
            i for i in jobinfo
                if i['rec_begin'] >= date_begin and i['rec_begin'] < date_end]

    print(
        'ID       Ch             Title                    '\
        'Start           walltime rep tuner')

    prev_wday = ''
    for j in jobinfo:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline)
        wday = starttime.split()[0]

        if wday != prev_wday:
            print(
                '-------- -------------- ------------------------ '\
                '--------------- -------- --- -----'
            )
            prev_wday = wday

        # ジョブのチャンネル番号を元に対応する局名を取得
        chnum = j.get('channel')
        chname = j.get('station_name')

        # Walltimeを取得
        walltime = strhms(j.get('walltime').total_seconds())

        # 実行中のジョブの経過時間を取得
        if j.get('elapse'):
            elapse = strhms(j.get('elapse').total_seconds())
        else:
            elapse = ''

        # ジョブの状態を取得
        state = j.get('record_state', '')
        if state == 'Waiting':
            # Waiting表示がうるさいので削る
            state = ''
        if j.get('alert'):
            state = ' '.join((j.get('alert'), state))

        repeat = j.get('repeat', 'ONESHOT')

        print('{:8} {:>3} {:10} {:24} {} {} {:3} {:5} {} {}'.format(
            j.get('rj_id', ''),
            chnum,
            chname,
            j.get('rj_title', ''),
            starttime,
            walltime,
            repeat_state[repeat],
            j.get('tuner', ''),
            state,
            elapse))

def print_job_information(jobinfo, dateline=0, wormup=0):
    """
    ジョブの配列を受け取り詳細情報を表示する
    """
    for j in jobinfo:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)
        end = j.get('rec_end') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline, year=True, sec=True)

        # ジョブ終了時刻
        endtime = str_w_ymd_hms(end, dateline, year=True, sec=True)

        # Walltimeを取得
        walltime = strhms(j.get('walltime').total_seconds())

        # 実行中のジョブの経過時間を取得
        if j.get('elapse'):
            elapse = strhms(j.get('elapse').total_seconds())
        else:
            elapse = '-'

        # チャンネル番号と局名を取得
        chnum = j.get('channel')
        chname = j.get('station_name')

        print('Title: {}'.format(j.get('rj_title')))
        print('    Job Id:           {}'.format(j.get('rj_id')))
        print('    Channel number:   {}'.format(chnum))
        print('    Channel name:     {}'.format(chname))
        print('    Start:            {}'.format(starttime))
        print('    End:              {}'.format(endtime))
        print('    Walltime:         {}'.format(walltime))
        print('    Elapse time:      {}'.format(elapse))
        print('    Owner:            {}'.format(j.get('user')))
        print('    Group:            {}'.format(j.get('group')))
        print('    Tuner:            {}'.format(j.get('tuner')))
        print('    State:            {}'.format(j.get('record_state')))
        print('    Alert:            {}'.format(j.get('alert')))
        print('    Job execute time: {}'.format(j.get('Execution_Time')))
        print('    Job create time:  {}'.format(j.get('ctime')))
        print('    Job modify time:  {}'.format(j.get('mtime')))
        print('    Execute host:     {}'.format(j.get('exec_host')))

def strhms(sec):
    """
    秒数を受け取ってHH:MM:SS形式の文字列を返す
    """
    hms = '{:02}:{:02}:{:02}'.format(
        int(sec / 3600),
        int(sec % 3600 / 60),
        int(sec % 60),
    )
    return hms

def str_w_ymd_hms(time, dateline=0, year=False, sec=False):
    """
    datetimeオブジェクトとdatelineを受け取り
    datelineを加味した"Wday yyyy/mm/dd HH:MM:SS"を返す
    """
    _wday, _year, _mon, _day, _hour = eval_dateline(time, dateline)

    if year:
        w_ymd = '{} {:0>4}/{:0>2}/{:0>2}'.format(_wday, _year, _mon, _day)
    else:
        w_ymd = '{} {:>2}/{:<2}'.format(_wday, _mon, _day)

    if sec:
        hms = '{:0>2}:{:0>2}:{:0>2}'.format(_hour, time.minute, time.second)
    else:
        hms = '{:0>2}:{:0>2}'.format(_hour, time.minute)

    return w_ymd + ' ' + hms

def eval_dateline(time, dateline):
    """
    datetimeオブジェクトtimeに対し、datalineを加味した結果の
    wday, year, mon, day, hourを返す
    """
    if time.hour >= dateline:
        wday = time.strftime("%a")
        year = time.strftime("%Y")
        mon  = time.strftime("%m")
        day  = time.strftime("%d")
        hour = time.strftime("%H")
    else:
        # 24時以降、datelineまでを当日扱いに
        wday = (time - timedelta(days=1)).strftime("%a")
        year = (time - timedelta(days=1)).strftime("%Y")
        mon  = (time - timedelta(days=1)).strftime("%m")
        day  = (time - timedelta(days=1)).strftime("%d")
        hour = str(int(time.strftime("%H")) + 24)
    return wday, year, mon, day, hour

def main():
    mdl = importlib.import_module('rjsched.RecordJob' + scheduler)
    cls = getattr(mdl, 'RecordJob' + scheduler.capitalize())
    rec = cls()

    chinfo = rec.get_channel_info()

    args = docopt(__doc__)
    if args.get('add'):
        """
        録画ジョブを追加する
        """
        if args.get('--repeat'):
            repeat = args.get('--repeat')[0]
        else:
            repeat = ''

        # 引数チェック(チャンネル)
        ch = args.get('CH', '')
        if not ch.isdecimal():
            print('invalid Channel: {}'.format(ch))
            sys.exit(1)

        # 引数チェック(開始時刻)
        date_ = args.get('DATE', '')
        time_ = args.get('TIME', '')
        begin = cliutil.parse_start_time(
            date_, time_, wormup_sec, day_change_hour)
        if not begin:
            print('Invalid date, time: {} {}'.format(date_, time_))
            sys.exit(1)

        # 引数チェック(録画時間)
        #rectime_str = args.get('RECORDINGTIME', default_rectime)
        rectime_str = args.get('RECORDINGTIME')
        if not rectime_str:
            rectime_str = default_rectime

        rectime = cliutil.parse_time(rectime_str)
        if not rectime:
            print('Invalid recording time, time: {}'.format(rectime))
            sys.exit(1)

        name = args.get('NAME', '')
        if not name:
            print('Invalid name')

        jobinfo = rec.add(ch, args.get('NAME'), begin, rectime, repeat)
        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

    elif args.get('del'):
        """
        録画ジョブを削除する
        """
        jid = args.get('JOBID')[0]

        # 削除対象ジョブを表示
        jobinfo = rec.get_job_info(jid)
        if not jobinfo:
            print('no such jobid: {}'.format(jid))
            sys.exit(1)

        print('REMOVE JOB:')
        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

        rec.remove(jid)

        print('\nCURRENT JOBS:')
        jobinfo = rec.get_job_info()
        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

    elif args.get('list'):
        """
        スケジュールされた録画ジョブを一覧表示する
        """
        date = None
        date_str = args.get('DATE')
        if date_str:
            date = cliutil.parse_date(date_str, day_change_hour)
            if not date:
                print('invalid DATE:', date_str)
                sys.exit(1)
        jobinfo = rec.get_job_info()

        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec, date)

    elif args.get('show'):
        """
        引数に指定されたIDのジョブを表示する
        """
        jid = args.get('JOBID')[0]
        jobinfo = rec.get_job_info(jid=jid)
        if jobinfo:
            print_job_information(
                jobinfo,
                chinfo,
                dateline=day_change_hour,
                wormup=wormup_sec)

    elif args.get('modbegin'):
        """
        登録済み録画ジョブの開始時刻を変更する
        """
        jid = args.get('JOBID')[0]

        if args.get('DELTATIME'):
            # 相対時刻で変更
            delta = cliutil.parse_time_delta(args.get('DELTATIME'))
            if not delta:
                print('invalid DELTATIME: {}'.format(args.get('DELTATIME')))
                sys.exit(1)
            joblist = rec.change_begin(jid, delta=delta)
        else:
            # 絶対時刻で変更
            d = args.get('DATE')
            t = args.get('TIME')
            begin = cliutil.parse_start_time(d, t)
            if not begin:
                print('invalid DATE TIME: {} {}'.format(d, t))
                sys.exit(1)
            joblist = rec.change_begin(jid, begin)

        if joblist:
            print('Before')
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print('\nAfter')
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec)
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modrectime'):
        """
        登録済み録画ジョブの録画時間を再設定する。
        """
        jid = args.get('JOBID')[0]

        rectime_str = args.get('RECORDINGTIME')
        m = re.search(r'.*(\+|-)', rectime_str)
        if m:
            # 現在の録画時間からの差分で変更
            delta = cliutil.parse_time_delta(rectime_str)
            if not delta:
                print('invalid RECORDINGTIME: {}'.format(rectime_str))
                sys.exit(1)
            joblist = rec.change_rectime(jid, delta=delta)
        else:
            # 指定の録画時間で変更
            rectime = cliutil.parse_time(rectime_str)
            if not rectime:
                print('invalid RECORDINGTIME: {}'.format(rectime_str))
                sys.exit(1)
            joblist = rec.change_rectime(jid, rectime)

        if joblist:
            print('Before')
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print('\nAfter')
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec)
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modch'):
        """
        登録済み録画ジョブのチャンネルを再設定する。
        """
        jid = args.get('JOBID')[0]

        ch = args.get('CH')
        if ch.isdigit():
            joblist = rec.change_channel(jid, ch)
        else:
            print('invalid channel: {}'.format(ch))
            sys.exit(1)

        if joblist:
            print('Before')
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print('\nAfter')
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec)
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modname'):
        """
        登録済み録画ジョブの番組名を再設定する。
        """
        jid = args.get('JOBID')[0]

        name = args.get('NAME')
        joblist = rec.change_name(jid, name)

        if joblist:
            print('Before')
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print('After')
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec)
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('setrep'):
        """
        リピート条件をセット/アンセット
        """
        repeat_flag = ['weekly', 'daily', 'weekday', 'asadora', 'norepeat']
        if args.get('setrep'):
            repeat = args.get('TYPE')
            if repeat.lower() not in repeat_flag:
                print('setrep TYPE:', ', '.join(repeat_flag))
                sys.exit(1)

        jid = args.get('JOBID')[0]

        origin = rec.get_job_info(jid=jid)[0]
        if not origin:
            print('No such jobid:', ', '.join(jid))
            sys.exit(1)

        joblist = rec.change_repeat(origin, repeat)
        if joblist:
            print('Before')
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print('After')
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec)
        else:
            print('{} cannot set repeat flag.'.format(scheduler))

    elif args.get('listch'):
        """
        テレビ局名とチャンネル番号の一覧を表示する
        """
        print('  Ch: TV station name')
        print(' ---- ----------------')
        for name, num in sorted(chinfo.items(), key=lambda x: x[0]):
            print('{:>4}: {}'.format(name, num))

"""
main
"""
#main()

def get_args():
    # トップレベルパーサー
    parser = argparse.ArgumentParser()

    # セカンドレベルパーサー
    subparsers = parser.add_subparsers()

    # セカンドレベルパーサーからサブコマンドを生成
    parser_add = subparsers.add_parser('add', help='add TV recording JOB')
    parser_del = subparsers.add_parser('del', help='delete JOBs')
    parser_list = subparsers.add_parser('list', help='list JOBs')
    parser_show = subparsers.add_parser('show', help='show JOB information')
    parser_modbegin = subparsers.add_parser('modbegin', help='change start time')
    parser_modrectime = subparsers.add_parser('modrectime', help='change recording time')
    parser_modch = subparsers.add_parser('modch', help='change recording channel')

    # addサブコマンドの引数設定
    parser_add.add_argument('ch', type=str, help='channel number')
    parser_add.add_argument('name', type=str, help='program name')
    parser_add.add_argument('date', type=str, help='airdate')
    parser_add.add_argument('time', type=str, help='airtime')
    parser_add.add_argument('rectime', type=str, nargs='?',
        default=default_rectime, help='recording time')
    parser_add.set_defaults(func=add_job)

    # delサブコマンドの引数設定
    parser_del.add_argument('jobid', type=str, nargs='+',
        help='JOB IDs to delete')
    parser_del.set_defaults(func=del_job)

    # modbeginサブコマンドの引数設定
    parser_modbegin.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modbegin.add_argument(
        'date', type=str, metavar='date|relative_time',
        help='new airdate, or time from current start time')
    parser_modbegin.add_argument('time', type=str, nargs='?',
        default='', help='new airtime (with "date")')
    parser_modbegin.set_defaults(func=modbegin)

    # modrectimeサブコマンドの引数設定
    parser_modrectime.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modrectime.add_argument('rectime', type=str, help='new recording time')
    parser_modrectime.set_defaults(func=modrectime)

    # modchサブコマンドの引数設定
    parser_modch.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modch.add_argument('ch', type=str, help='new recording channel')
    parser_modch.set_defaults(func=modch)

    # listサブコマンドの引数設定
    parser_list.add_argument('date', type=str, nargs='?', default='',
        help='airdate')
    parser_list.set_defaults(func=list_job)

    # showサブコマンドの引数設定
    parser_show.add_argument('jobid', type=str, help="JOB ID")
    parser_show.set_defaults(func=show_job)

    return parser.parse_args()

def main_():
    mdl = importlib.import_module('rjsched.RecordJob' + scheduler)
    cls = getattr(mdl, 'RecordJob' + scheduler.capitalize())
    rec = cls()

    args = get_args()
    args.func(args, rec)

def add_job(args, rec):
    """
    録画ジョブを追加する
    """
    #if args.get('--repeat'):
    #    repeat = args.get('--repeat')[0]
    #else:
    #    repeat = ''
    repeat = ''

    # 引数チェック(チャンネル)
    if not args.ch.isdecimal():
        print('invalid Channel: {}'.format(ch))
        sys.exit(1)

    # 引数チェック(開始時刻)
    begin = cliutil.parse_start_time(
        args.date, args.time, wormup_sec, day_change_hour)
    if not begin:
        print('Invalid date, time: {} {}'.format(date, time))
        sys.exit(1)

    if not cliutil.is_future(begin):
        print('Start in the past.')
        sys.exit(1)

    # 引数チェック(録画時間)
    rectime = cliutil.parse_time(args.rectime)
    if not rectime:
        print('Invalid recording time, time: {}'.format(rectime))
        sys.exit(1)

    jobinfo = rec.add(args.ch, args.name, begin, rectime, repeat)
    print_joblist(jobinfo, day_change_hour, wormup_sec)

def list_job(args, rec):
    """
    スケジュールされた録画ジョブを一覧表示する
    """
    date_ = None
    if args.date:
        date_ = cliutil.parse_date(args.date, day_change_hour)
        if not date_:
            print('invalid DATE:', date_)
            sys.exit(1)
    jobinfo = rec.get_job_info()

    print_joblist(jobinfo, day_change_hour, wormup_sec, date_)

def show_job(args, rec):
    """
    引数に指定されたIDのジョブを表示する
    """
    jid = args.jobid
    jobinfo = rec.get_job_info(jid)
    if not jobinfo:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    print_job_information(
        jobinfo,
        dateline=day_change_hour,
        wormup=wormup_sec)

def del_job(args, rec):
    """
    録画ジョブを削除する
    """
    jobinfo = rec.get_job_info()

    # 引数で渡されたジョブIDのうち、存在するジョブのみ削除対象として抽出
    delete_jobs = [i for i in jobinfo if i.get('rj_id') in args.jobid]

    delete_jobids = set([i.get('rj_id') for i in delete_jobs])
    not_exist_jobids = set(args.jobid) - delete_jobids

    # 引数で渡されたジョブIDのうち、存在しないジョブIDを警告表示
    if not_exist_jobids:
        print('No such JOB ID: {}\n'.format(", ".join(not_exist_jobids)))

    if delete_jobids:
        # 削除対象ジョブを表示
        print('REMOVE JOB:')
        print_joblist(delete_jobs, day_change_hour, wormup_sec)

        # ジョブ削除
        for jid in delete_jobids:
            rec.remove(jid)

def modbegin(args, rec):
    """
    登録済み録画ジョブの開始時刻を変更する
    """
    jid = args.jobid

    joblist = rec.get_job_info(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)


    if args.time:
        # 絶対時刻で変更
        date_ = args.date
        time_ = args.time
        begin = cliutil.parse_start_time(date_, time_)
        if not begin:
            print('Invalid date time: {} {}'.format(date_, time_))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, day_change_hour, wormup_sec)
        joblist = rec.change_begin(joblist, begin=begin)
    else:
        # 相対時刻で変更
        date_ = args.date
        delta = cliutil.parse_time_delta(date_)
        if not delta:
            print('Invalid deltatime: {}'.format(date_))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, day_change_hour, wormup_sec)
        joblist = rec.change_begin(joblist, delta=delta)

    print('\nAfter')
    print_joblist(joblist, day_change_hour, wormup_sec)

def modrectime(args, rec):
    """
    登録済み録画ジョブの録画時間を再設定する。
    """
    jid = args.jobid

    joblist = rec.get_job_info(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    rt = args.rectime
    m = re.search(r'.*(\+|-)', rt)
    if m:
        # 現在の録画時間からの差分で変更
        delta = cliutil.parse_time_delta(rt)
        if not delta:
            print('invalid recording time: {}'.format(rt))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, day_change_hour, wormup_sec)
        joblist = rec.change_rectime(joblist, delta=delta)
    else:
        # 指定の録画時間で変更
        rectime = cliutil.parse_time(rt)
        if not rectime:
            print('invalid recording time: {}'.format(rt))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, day_change_hour, wormup_sec)
        joblist = rec.change_rectime(joblist, rectime=rectime)

    print('\nAfter')
    print_joblist(joblist, day_change_hour, wormup_sec)

def modch(args, rec):
    jid = args.jobid
    ch = args.ch
    if not ch.encode('utf-8').isdigit():
        print('invalid channel number: {}'.format(ch))
        sys.exit(1)
    joblist = rec.get_job_info(jid)
    print('Before')
    print_joblist(joblist, day_change_hour, wormup_sec)

    joblist = rec.change_channel(joblist, ch)

    print('\nAfter')
    print_joblist(joblist, day_change_hour, wormup_sec)

"""
main_
"""
main_()
