#!/usr/bin/env python3
"""
Recording resrevation the TV program by JOB scheduler
"""
from datetime import datetime, timedelta
import argparse
import cliutil
import importlib
import os
import rjsched
import re
import sys
import yaml

"""
設定読み込み
"""
def load_config():
    """
    '~/.rj/config.yml'から設定を読み込む
    """
    try:
        with open(os.path.expanduser('~/.rj/config.yml')) as f:
            config = yaml.load(f)
    except (PermissionError, FileNotFoundError, yaml.YAMLError) as err:
        print('config.yml cannot load: {}'.format(err))
        sys.exit(1)
    return config

"""
引数の解析
"""
def get_args():
    # トップレベルパーサー
    parser = argparse.ArgumentParser()

    # セカンドレベルパーサー
    subparsers = parser.add_subparsers()

    # セカンドレベルパーサーからサブコマンドを生成
    parser_add = subparsers.add_parser(
        'add', help='add TV recording JOB')
    parser_del = subparsers.add_parser(
        'del', help='delete JOBs')
    parser_list = subparsers.add_parser(
        'list', help='list JOBs')
    parser_show = subparsers.add_parser(
        'show', help='show JOB information')
    parser_modbegin = subparsers.add_parser(
        'modbegin', help='change start time')
    parser_modrectime = subparsers.add_parser(
        'modrectime', help='change recording time')
    parser_modch = subparsers.add_parser(
        'modch', help='change channel of program')
    parser_modname = subparsers.add_parser(
        'modname', help='change title name of program')
    parser_chlist = subparsers.add_parser(
        'chlist', help='list TV station name')

    # addサブコマンドの引数設定
    parser_add.add_argument('ch', type=str, help='channel number')
    parser_add.add_argument('name', type=str, help='program name')
    parser_add.add_argument('date', type=str, help='airdate')
    parser_add.add_argument('time', type=str, help='airtime')
    parser_add.add_argument('rectime', type=str, nargs='?',
        default='', help='recording time')
    parser_add.set_defaults(func=add_)

    # delサブコマンドの引数設定
    parser_del.add_argument('jobid', type=str, nargs='+',
        help='JOB IDs to delete')
    parser_del.set_defaults(func=del_)

    # modbeginサブコマンドの引数設定
    parser_modbegin.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modbegin.add_argument(
        'date', type=str, metavar='date|relative_time',
        help='new airdate, or time from current start time')
    parser_modbegin.add_argument('time', type=str, nargs='?',
        default='', help='new airtime (with "date")')
    parser_modbegin.set_defaults(func=modbegin)

    # modrectimeサブコマンドの引数設定
    parser_modrectime.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modrectime.add_argument('rectime', type=str, help='new recording time')
    parser_modrectime.set_defaults(func=modrectime)

    # modchサブコマンドの引数設定
    parser_modch.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modch.add_argument('ch', type=str, help='new channel number')
    parser_modch.set_defaults(func=modch)

    # modnameサブコマンドの引数設定
    parser_modname.add_argument('jobid', type=str, help='JOB ID to modify')
    parser_modname.add_argument('name', type=str, help='new title name')
    parser_modname.set_defaults(func=modname)

    # listサブコマンドの引数設定
    parser_list.add_argument('date', type=str, nargs='?', help='airdate')
    parser_list.set_defaults(func=list_)

    # showサブコマンドの引数設定
    parser_show.add_argument('jobid', type=str, help="JOB ID")
    parser_show.set_defaults(func=show)

    # listサブコマンドの引数設定
    parser_chlist.set_defaults(func=chlist)

    return parser.parse_args()

"""
引数ごとの処理
"""
def add_(args, rec, config):
    """
    録画ジョブを追加する
    """
    wormup_sec = config.get('wormup_sec')
    day_change_hour = config.get('day_change_hour')

    # 引数チェック(チャンネル)
    if not args.ch.isdecimal():
        print('invalid Channel: {}'.format(ch))
        sys.exit(1)

    # 引数チェック(開始時刻)
    begin = cliutil.parse_start_time(
        args.date, args.time, wormup_sec, day_change_hour)
    if not begin:
        print('Invalid date, time: {} {}'.format(date, time))
        sys.exit(1)

    if not cliutil.is_future(begin):
        print('Start in the past.')
        sys.exit(1)

    # 引数チェック(録画時間)
    if args.rectime:
        rectime = cliutil.parse_time(args.rectime)
    else:
        rectime = cliutil.parse_time(str(config.get('default_rectime', '')))

    if not rectime:
        print('Invalid recording time, time: {}'.format(rectime))
        sys.exit(1)

    joblist = rec.add(args.ch, args.name, begin, rectime)
    print_joblist(joblist, config)

def list_(args, rec, config):
    """
    スケジュールされた録画ジョブを一覧表示する
    """
    day_change_hour = config.get('day_change_hour')
    date_ = None
    if args.date:
        date_ = cliutil.parse_date(args.date, day_change_hour)
        if not date_:
            print('invalid DATE:', date_)
            sys.exit(1)
    joblist = rec.get_job_list()

    print_joblist(joblist, config, date_)

def show(args, rec, config):
    """
    引数に指定されたIDの録画ジョブを表示する
    """
    jid = args.jobid
    joblist = rec.get_job_list(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    print_job_information(joblist, config)

def del_(args, rec, config):
    """
    録画ジョブを削除する
    """
    joblist = rec.get_job_list()

    # 引数で渡されたジョブIDのうち、存在するジョブのみ削除対象として抽出
    delete_jobs = [i for i in joblist if i.get('rj_id') in args.jobid]

    delete_jobids = set([i.get('rj_id') for i in delete_jobs])
    not_exist_jobids = set(args.jobid) - delete_jobids

    # 引数で渡されたジョブIDのうち、存在しないジョブIDを警告表示
    if not_exist_jobids:
        print('No such JOB ID: {}\n'.format(", ".join(not_exist_jobids)))

    if delete_jobids:
        # 削除対象ジョブを表示
        print('Delete JOB:')
        print_joblist(delete_jobs, config)

        # ジョブ削除
        for jid in delete_jobids:
            rec.remove(jid)

def modbegin(args, rec, config):
    """
    録画ジョブの録画開始時刻を変更する
    """
    jid = args.jobid

    joblist = rec.get_job_list(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)


    if args.time:
        # 絶対時刻で変更
        date_ = args.date
        time_ = args.time
        begin = cliutil.parse_start_time(date_, time_)
        if not begin:
            print('Invalid date time: {} {}'.format(date_, time_))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, config)
        joblist = rec.change_begin(joblist, begin=begin)
    else:
        # 相対時刻で変更
        date_ = args.date
        delta = cliutil.parse_time_delta(date_)
        if not delta:
            print('Invalid deltatime: {}'.format(date_))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, config)
        joblist = rec.change_begin(joblist, delta=delta)

    print('\nAfter')
    print_joblist(joblist, config)

def modrectime(args, rec, config):
    """
    録画ジョブの録画時間を変更する。
    """
    jid = args.jobid

    joblist = rec.get_job_list(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    rt = args.rectime
    m = re.search(r'.*(\+|-)', rt)
    if m:
        # 現在の録画時間からの差分で変更
        delta = cliutil.parse_time_delta(rt)
        if not delta:
            print('invalid recording time: {}'.format(rt))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, config)
        joblist = rec.change_rectime(joblist, delta=delta)
    else:
        # 指定の録画時間で変更
        rectime = cliutil.parse_time(rt)
        if not rectime:
            print('invalid recording time: {}'.format(rt))
            sys.exit(1)

        print('Before')
        print_joblist(joblist, config)
        joblist = rec.change_rectime(joblist, rectime=rectime)

    print('\nAfter')
    print_joblist(joblist, config)

def modch(args, rec, config):
    """
    録画ジョブのチャンネル番号を変更する。
    """
    jid = args.jobid
    ch = args.ch
    if not ch.encode('utf-8').isdigit():
        print('invalid channel number: {}'.format(ch))
        sys.exit(1)

    joblist = rec.get_job_list(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    print('Before')
    print_joblist(joblist, config)

    joblist = rec.change_channel(joblist, ch)

    print('\nAfter')
    print_joblist(joblist, config)

def modname(args, rec, config):
    """
    録画ジョブの番組名を変更する。
    """
    jid = args.jobid
    name = args.name

    joblist = rec.get_job_list(jid)
    if not joblist:
        print('No such JOB ID: {}'.format(jid))
        sys.exit(1)

    print('Before')
    print_joblist(joblist, config)

    joblist = rec.change_name(joblist, name)

    print('\nAfter')
    print_joblist(joblist, config)

def chlist(args, rec, config):
    """
    テレビ局名とチャンネル番号の一覧を表示する
    """
    chlist = rec.get_channel_list()
    print('  Ch: TV station name')
    print(' ---- ----------------')
    for name, num in sorted(chlist.items(), key=lambda x: x[0]):
        print('{:>4}: {}'.format(name, num))

"""
ジョブ表示用関数
"""
def print_joblist(joblist, config, date=None):
    """
    ジョブの配列を受け取り一覧表示する
    """
    dateline = config.get('day_change_hour', 0)
    wormup = config.get('wormup_sec', 0)
    tmpl_header = '{_id:5} {_channel:14} {_title:24} {_start:15} '\
        '{_rectime:8} {_user:8} {_tuner:5}'
    header = tmpl_header.format(
        _id='ID',
        _channel='Channel',
        _title='Title',
        _start='Start',
        _rectime='Rectime',
        _user='User',
        _tuner='Tuner')
    hr = tmpl_header.format(
        _id='-'*5,
        _channel='-'*14,
        _title='-'*24,
        _start='-'*15,
        _rectime='-'*8,
        _user='-'*8,
        _tuner='-'*5)
    tmpl = '{_id:5} {_ch:3} {_chname:10} {_title:24} {_start:15} '\
        '{_rectime:8} {_user:8} {_tuner:5} {_state} {_elapse}'

    if date:
        # 指定された日に録画を開始するジョブの情報のみ抽出
        date_begin = datetime(date.year, date.month, date.day, dateline)
        date_end = date_begin + timedelta(days=1)
        joblist = [
            i for i in joblist
                if i['rec_begin'] >= date_begin and i['rec_begin'] < date_end]

    print(header)

    prev_wday = ''
    for j in joblist:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline)
        wday = starttime.split()[0]

        if wday != prev_wday:
            print(hr)
            prev_wday = wday

        # ジョブのチャンネル番号を元に対応する局名を取得
        chnum = j.get('channel')
        chname = j.get('station_name')

        # Walltimeを取得
        walltime = strhms(j.get('walltime').total_seconds())

        # 実行中のジョブの経過時間を取得
        if j.get('elapse'):
            elapse = strhms(j.get('elapse').total_seconds())
        else:
            elapse = ''

        # ジョブの状態を取得
        state = j.get('record_state', '')
        if state == 'Waiting':
            # Waiting表示がうるさいので削る
            state = ''
        if j.get('alert'):
            state = ' '.join((j.get('alert'), state))

        print(tmpl.format(
            _id=j.get('rj_id', ''),
            _ch=chnum,
            _chname=chname,
            _title=j.get('rj_title', ''),
            _start=starttime,
            _rectime=walltime,
            _user=j.get('user', ''),
            _tuner=j.get('tuner', ''),
            _state=state,
            _elapse=elapse))

def print_job_information(joblist, config):
    """
    ジョブの配列を受け取り詳細情報を表示する
    """
    dateline = config.get('day_change_hour', 0)
    wormup = config.get('wormup_sec', 0)
    for j in joblist:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)
        end = j.get('rec_end') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline, year=True, sec=True)

        # ジョブ終了時刻
        endtime = str_w_ymd_hms(end, dateline, year=True, sec=True)

        # Walltimeを取得
        walltime = strhms(j.get('walltime').total_seconds())

        # 実行中のジョブの経過時間を取得
        if j.get('elapse'):
            elapse = strhms(j.get('elapse').total_seconds())
        else:
            elapse = '-'

        # チャンネル番号と局名を取得
        chnum = j.get('channel')
        chname = j.get('station_name')

        print('Title: {}'.format(j.get('rj_title')))
        print('    Job Id:           {}'.format(j.get('rj_id')))
        print('    Channel number:   {}'.format(chnum))
        print('    Channel name:     {}'.format(chname))
        print('    Start:            {}'.format(starttime))
        print('    End:              {}'.format(endtime))
        print('    Walltime:         {}'.format(walltime))
        print('    Elapse time:      {}'.format(elapse))
        print('    Owner:            {}'.format(j.get('user')))
        print('    Group:            {}'.format(j.get('group')))
        print('    Tuner:            {}'.format(j.get('tuner')))
        print('    State:            {}'.format(j.get('record_state')))
        print('    Alert:            {}'.format(j.get('alert')))
        print('    Job execute time: {}'.format(j.get('Execution_Time')))
        print('    Job create time:  {}'.format(j.get('ctime')))
        print('    Job modify time:  {}'.format(j.get('mtime')))
        print('    Execute host:     {}'.format(j.get('exec_host')))

def strhms(sec):
    """
    秒数を受け取ってHH:MM:SS形式の文字列を返す
    """
    hms = '{:02}:{:02}:{:02}'.format(
        int(sec / 3600),
        int(sec % 3600 / 60),
        int(sec % 60),
    )
    return hms

def str_w_ymd_hms(time, dateline=0, year=False, sec=False):
    """
    datetimeオブジェクトとdatelineを受け取り
    datelineを加味した"Wday yyyy/mm/dd HH:MM:SS"を返す
    """
    _wday, _year, _mon, _day, _hour = eval_dateline(time, dateline)

    if year:
        w_ymd = '{} {:0>4}/{:0>2}/{:0>2}'.format(_wday, _year, _mon, _day)
    else:
        w_ymd = '{} {:>2}/{:<2}'.format(_wday, _mon, _day)

    if sec:
        hms = '{:0>2}:{:0>2}:{:0>2}'.format(_hour, time.minute, time.second)
    else:
        hms = '{:0>2}:{:0>2}'.format(_hour, time.minute)

    return w_ymd + ' ' + hms

def eval_dateline(time, dateline):
    """
    datetimeオブジェクトtimeに対し、datalineを加味した結果の
    wday, year, mon, day, hourを返す
    """
    if time.hour >= dateline:
        wday = time.strftime("%a")
        year = time.strftime("%Y")
        mon  = time.strftime("%m")
        day  = time.strftime("%d")
        hour = time.strftime("%H")
    else:
        # 24時以降、datelineまでを当日扱いに
        wday = (time - timedelta(days=1)).strftime("%a")
        year = (time - timedelta(days=1)).strftime("%Y")
        mon  = (time - timedelta(days=1)).strftime("%m")
        day  = (time - timedelta(days=1)).strftime("%d")
        hour = str(int(time.strftime("%H")) + 24)
    return wday, year, mon, day, hour

"""
main
"""
def main():
    config = load_config()

    schedtype = config.get('scheduler').capitalize()
    module_ = importlib.import_module('rjsched.RecordJob' + schedtype)
    class_ = getattr(module_, 'RecordJob' + schedtype)
    rec = class_()

    args = get_args()
    args.func(args, rec, config)

main()
