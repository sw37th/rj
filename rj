#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Record the TV program by JOB scheduler

Usage:
  rj [-h] add CH TITLE DATE TIME [RECORDINGTIME]
  rj [-h] list [DATE]
  rj [-h] show JOBID
  rj [-h] modbegin JOBID (DELTATIME | DATE TIME)
  rj [-h] chlist

Options:
  -h --help   show this screen.

"""

from docopt import docopt
from recordjob.RecordJobTorque import RecordJobTorque
import recordjob.rj_utils as rju
import re

# dateline_hour: 一日の基準時刻(時)
# 当日の基準時刻から翌日の基準時刻までを同一日とみなす。
# dateline_hour=5の場合、05:00-28:59が同一日。
dateline_hour = 5

# wormup_sec: 録画開始のマージン
# ジョブがスタートしてから実際に録画開始されるまでタイムラグがあるため
# 指定時刻よりwormup_sec秒だけ早くジョブを開始する。
wormup_sec = 10

# default_rectime: デフォルトの録画時間
default_rectime = '00:29:30'

args = docopt(__doc__)

rec = RecordJobTorque()
chinfo = rec.get_channel_info().get('channel', {})

def pj(jobinfo, header=None):
    rju.print_joblist(
        jobinfo,
        chinfo,
        header=header,
        dateline=dateline_hour,
        wormup=wormup_sec
    )

def check_start_time(date, time):
    try:
        begin = rju.parse_date(date) + rju.parse_time(time)
    except TypeError:
        print("Invalid Date:", date, time)
        return None

    # wormup_secの秒数だけ開始時刻のマージンを取る
    begin -= rju.parse_time(str(wormup_sec))

    if rju.is_past(begin):
        print('start in the past')
        return None

    return begin

if args['add']:
    """
    録画ジョブを追加する
    """

    # 引数チェック(チャンネル)
    ch = rju.parse_channel(args['CH'])
    if not ch:
        print('Invalid Channel:', args['CH'])
        exit()

    # 引数チェック(開始時刻)
    begin = check_start_time(args['DATE'], args['TIME'])
    if not begin:
        exit()

    # 引数チェック(録画時間)
    if args['RECORDINGTIME']:
        rectime = rju.parse_time(args['RECORDINGTIME'])
        if not rectime:
            print('Invalid Recordingtime:', args['RECORDINGTIME'])
            exit()
    else:
        rectime = rju.parse_time(default_rectime)

    jid = rec.add(ch, args['TITLE'], begin, rectime)
    if jid:
        jobinfo = rec.get_job_info(jid=jid)
        pj(jobinfo)

elif args['list']:
    """
    スケジュールされた録画ジョブを一覧表示する
    """
    date = None
    if args['DATE']:
        date = rju.parse_date(args['DATE'], dateline=dateline_hour)
        if not date:
            print('invalit format:', args['DATE'])
            exit()

    jobinfo = rec.get_job_info(date=date)
    pj(jobinfo)

elif args['show']:
    """
    引数に指定されたIDのジョブを表示する
    """
    jobinfo = rec.get_job_info(jid=args['JOBID'])
    if jobinfo:
        rju.print_job_information(
            jobinfo,
            chinfo,
            dateline=dateline_hour,
            wormup=wormup_sec)

elif args['modbegin']:
    """
    録画ジョブの開始時間を変更する
    """
    jobinfo = rec.get_job_info(jid=args['JOBID'])
    if not jobinfo:
        print('No such jobid:', args['JOBID'])

    # before modify
    pj(jobinfo)

    if args['DELTATIME']:
        # 相対時刻で変更
        time_delta = rju.parse_time_delta(args['DELTATIME'])
        if time_delta:
            rec.mod_begintime(jobinfo, time_delta=time_delta)
    else:
        # 絶対時刻で変更

        # 引数チェック(開始時刻)
        begin = check_start_time(args['DATE'], args['TIME'])
        if not begin:
            exit()
        rec.mod_begintime(jobinfo, date=begin)

    # after modify
    jobinfo = rec.get_job_info(jid=args['JOBID'])
    pj(jobinfo, '(Start time modified)')

elif args['chlist']:
    """
    テレビ局名とチャンネル番号の一覧を表示する
    """
    for name, num in sorted(chinfo['channel'].items(), key=lambda x: x[0]):
        print('{:>4}: {}'.format(name, num))
