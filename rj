#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Record the TV program by JOB scheduler

Usage:
  rj [-h] add CH TITLE DATE TIME [RECORDINGTIME]
  rj [-h] del JOBID [JOBID...]
  rj [-h] list [DATE]
  rj [-h] show JOBID
  rj [-h] modbegin JOBID (DELTATIME | DATE TIME)
  rj [-h] modrectime JOBID RECORDINGTIME
  rj [-h] chlist

Options:
  -h --help   show this screen.

"""

from docopt import docopt
import importlib
import recordjob
import recordjob.rj_utils as rju
import re

# dateline_hour: 一日の基準時刻(時)
# 当日の基準時刻から翌日の基準時刻-1secまでを同一日とみなす。
# dateline_hour=5の場合、05:00:00-28:59:59が同一日。
dateline_hour = 5

# wormup_sec: 録画開始のマージン
# ジョブがスタートしてから実際に録画開始されるまでタイムラグがあるため
# 指定時刻よりwormup_sec秒だけ早くジョブを開始する。
wormup_sec = 10

# default_rectime: デフォルトの録画時間
default_rectime = '00:29:30'

#scheduler = "Torque"
scheduler = "Systemd"
args = docopt(__doc__)

mdl = importlib.import_module('recordjob.RecordJob' + scheduler)
cls = getattr(mdl, 'RecordJob' + scheduler.capitalize())
rec = cls()

chinfo = rec.get_channel_info().get('channel', {})

def pj(jobinfo, header=None):
    rju.print_joblist(
        jobinfo,
        chinfo,
        header=header,
        dateline=dateline_hour,
        wormup=wormup_sec
    )

def check_start_time(date, time):
    try:
        begin = (
            rju.parse_date(date, dateline=dateline_hour) + rju.parse_time(time)
        )
    except TypeError:
        print("Invalid Date:", date, time)
        return None

    # wormup_secの秒数だけ開始時刻のマージンを取る
    begin -= rju.parse_time(str(wormup_sec))

    if rju.is_past(begin):
        print('start in the past')
        return None

    return begin

def check_record_time(time):
    rectime = rju.parse_time(time)
    if not rectime:
        print('Invalid Recordingtime:', time)
    return rectime

if args.get('add'):
    """
    録画ジョブを追加する
    """

    # 引数チェック(チャンネル)
    ch = rju.parse_channel(args.get('CH'))
    if not ch:
        print('Invalid Channel:', args.get('CH'))
        exit()

    # 引数チェック(開始時刻)
    begin = check_start_time(args.get('DATE'), args.get('TIME'))
    if not begin:
        exit()

    # 引数チェック(録画時間)
    if args.get('RECORDINGTIME'):
        rectime = check_record_time(args.get('RECORDINGTIME'))
    else:
        rectime = rju.parse_time(default_rectime)

    if not rectime:
        exit()

    jid = rec.add(ch, args.get('TITLE'), begin, rectime)
    if jid:
        jobinfo = rec.get_job_info(jid=jid)
        pj(jobinfo)

elif args.get('del'):
    rec.remove(args.get('JOBID'))
    jobinfo = rec.get_job_info()
    pj(jobinfo)

elif args.get('list'):
    """
    スケジュールされた録画ジョブを一覧表示する
    """
    date = None
    s_date = args.get('DATE')
    if s_date:
        date = rju.parse_date(
            s_date, dateline=dateline_hour, dateonly=False
        )
        if not date:
            print('invalit format:', s_date)
            exit()

    jobinfo = rec.get_job_info(date=date)
    pj(jobinfo)

elif args.get('show'):
    """
    引数に指定されたIDのジョブを表示する
    """
    jobinfo = rec.get_job_info(jid=args.get('JOBID',''))
    if jobinfo:
        rju.print_job_information(
            jobinfo,
            chinfo,
            dateline=dateline_hour,
            wormup=wormup_sec)

elif args.get('modbegin') or args.get('modrectime'):
    """
    録画ジョブの開始時間を変更する
    """
    jid = args.get('JOBID')
    jobinfo = rec.get_job_info(jid=jid)
    if not jobinfo:
        print('No such jobid:', jid)

    # before modify
    pj(jobinfo)

    if args.get('modbegin'):
        if args.get('DELTATIME'):
            # 相対時刻で変更
            delta = rju.parse_time_delta(args.get('DELTATIME'))
            if delta:
                rec.modify(jobinfo=jobinfo, delta=delta)
        else:
            # 絶対時刻で変更
            begin = check_start_time(args.get('DATE'), args.get('TIME'))
            if not begin:
                exit()
            rec.modify(jobinfo, date=begin)
    elif args.get('modrectime'):
        rectime = check_record_time(args.get('RECORDINGTIME'))
        if not rectime:
            exit()
        rec.modify(jobinfo, rectime=rectime)

    # after modify
    jobinfo = rec.get_job_info(jid=jid)
    pj(jobinfo, '(Start time modified)')

elif args.get('chlist'):
    """
    テレビ局名とチャンネル番号の一覧を表示する
    """
    print('  Ch: TV station name')
    print(' ---- ----------------')
    for name, num in sorted(chinfo.items(), key=lambda x: x[0]):
        print('{:>4}: {}'.format(name, num))
