#!/usr/bin/env python3
"""Record the TV program by JOB scheduler

Usage:
  rj add [-r|--repeat <TYPE>] CH NAME DATE TIME [RECORDINGTIME]
  rj del JOBID [JOBID...]
  rj list [DATE]
  rj show JOBID
  rj modbegin JOBID (DELTATIME | DATE TIME)
  rj modrectime JOBID RECORDINGTIME
  rj modch JOBID CH
  rj modname JOBID NAME
  rj setrep JOBID TYPE
  rj unsetrep JOBID
  rj listch rj -h | --help

Options:
  -h --help            :show this screen.
  -r --repeat <TYPE>   :set repeat flag. TYPE can specify 'weekly', 'daily', 'weekday', 'asadora'

"""

from datetime import datetime, timedelta
from docopt import docopt
import cliutil
import importlib
import rjsched
import re
import sys
import time

# day_change_hour: 一日の基準時刻(時)
# 当日の基準時刻から翌日の基準時刻-1secまでを同一日とみなす。
# day_change_hour=5の場合、05:00:00-28:59:59が同一日。
day_change_hour = 5

# wormup_sec: 録画開始のマージン
# ジョブがスタートしてから実際に録画開始されるまでタイムラグがあるため
# 指定時刻よりwormup_sec秒だけ早くジョブを開始する。
wormup_sec = 30

# default_rectime: デフォルトの録画時間
default_rectime = '00:29:30'

#scheduler = "Torque"
#scheduler = "Systemd"
scheduler = "Openpbs"

def print_joblist(jobinfo, chinfo={}, dateline=0, wormup=0, header=None):
    """
    ジョブの配列を受け取り一覧表示する
    """
    repeat_state = {
        'WEEKLY':  'W',
        'DAILY':   'D',
        'WEEKDAY': 'Wd',
        'ASADORA': 'A',
        'ONESHOT': '',
    }
    if header:
        print(header)
    else:
        print(
            'ID       Ch             Title                    ' +
            'Start           walltime rep tuner'
        )

    prev_wday = ''
    for j in jobinfo:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline)
        wday = starttime.split()[0]

        if wday != prev_wday:
            print(
                '-------- -------------- ------------------------ ' +
                '--------------- -------- --- -----'
            )

        prev_wday = wday

        # ジョブのチャンネル番号を元に対応する局名を取得
        chnum = int(j.get('channel'))
        chname = chinfo.get(chnum, '')

        # Walltimeを取得
        walltime = j.get('walltime')
        if walltime:
            s_walltime = strhms(walltime.total_seconds())
        else:
            s_walltime = ''

        # 実行中のジョブの経過時間を取得
        elapse = j.get('elapse')
        if elapse:
            s_elapse = strhms(elapse.total_seconds())
        else:
            s_elapse = ''

        # ジョブの状態を取得
        state = j.get('record_state', '')
        if state == 'Waiting':
            # Waiting表示がうるさいので削る
            state = ''
        if j.get('alert'):
            state = ' '.join((j.get('alert'), state))

        repeat = j.get('repeat', 'ONESHOT')

        print('{:8} {:>3} {:10} {:24} {} {} {:3} {:5} {} {}'.format(
            j.get('rj_id', ''),
            chnum,
            chname,
            j.get('rj_title', ''),
            starttime,
            s_walltime,
            repeat_state[repeat],
            j.get('tuner', ''),
            state,
            s_elapse))

def print_job_information(jobinfo, chinfo={}, dateline=0, wormup=0):
    """
    ジョブの配列を受け取り詳細情報を表示する
    """
    for j in jobinfo:
        # 表示用に録画開始時刻マージン分を加算
        begin = j.get('rec_begin') + timedelta(seconds=wormup)
        end = j.get('rec_end') + timedelta(seconds=wormup)

        # ジョブ開始時刻
        starttime = str_w_ymd_hms(begin, dateline, year=True, sec=True)

        # ジョブ終了時刻
        endtime = str_w_ymd_hms(end, dateline, year=True, sec=True)

        # Walltimeを取得
        walltime = j.get('walltime')
        if walltime:
            s_walltime = strhms(walltime.total_seconds())
        else:
            s_walltime = '-'

        # チャンネル番号と局名を取得
        chnum = int(j.get('channel'))
        chname = chinfo.get(chnum, '')

        # 実行中のジョブの経過時間を取得
        elapse = j.get('elapse')
        if elapse:
            s_elapse = strhms(elapse.total_seconds())
        else:
            s_elapse = None

        print('Title:', j.get('rj_title'))
        print('  Job Id:          ', j.get('rj_id', '-'))
        print('  Channel number:  ', chnum)
        print('  Channel name:    ', chname)
        print('  Start:           ', starttime)
        print('  End:             ', endtime)
        print('  Walltime:        ', s_walltime)
        print('  Elapse time:     ', s_elapse)
        print('  Owner:           ', j.get('user', '-'))
        print('  Group:           ', j.get('group', '-'))
        print('  Tuner:           ', j.get('tuner', '-'))
        print('  State:           ', j.get('record_state', '-'))
        print('  Alert:           ', j.get('alert', '-'))
        print('  Job execute time:', j.get('Execution_Time', '-'))
        print('  Job create time: ', j.get('ctime', '-'))
        print('  Job modify time: ', j.get('mtime', '-'))
        print('  Execute host:    ', j.get('exec_host', '-'))

def strhms(sec):
    """
    秒数を受け取ってHH:MM:SS形式の文字列を返す
    """
    hms = '{:02}:{:02}:{:02}'.format(
        int(sec / 3600),
        int(sec % 3600 / 60),
        int(sec % 60),
    )
    return hms

def str_w_ymd_hms(time, dateline=0, year=False, sec=False):
    """
    datetimeオブジェクトとdatelineを受け取り
    datelineを加味した"Wday yyyy/mm/dd HH:MM:SS"を返す
    """
    _wday, _year, _mon, _day, _hour = eval_dateline(time, dateline)

    if year:
        w_ymd = '{} {:0>4}/{:0>2}/{:0>2}'.format(_wday, _year, _mon, _day)
    else:
        w_ymd = '{} {:>2}/{:<2}'.format(_wday, _mon, _day)

    if sec:
        hms = '{:0>2}:{:0>2}:{:0>2}'.format(_hour, time.minute, time.second)
    else:
        hms = '{:0>2}:{:0>2}'.format(_hour, time.minute)

    return w_ymd + ' ' + hms

def eval_dateline(time, dateline):
    """
    datetimeオブジェクトtimeに対し、datalineを加味した結果の
    wday, year, mon, day, hourを返す
    """
    if time.hour >= dateline:
        wday = time.strftime("%a")
        year = time.strftime("%Y")
        mon  = time.strftime("%m")
        day  = time.strftime("%d")
        hour = time.strftime("%H")
    else:
        # 24時以降、datelineまでを当日扱いに
        wday = (time - timedelta(days=1)).strftime("%a")
        year = (time - timedelta(days=1)).strftime("%Y")
        mon  = (time - timedelta(days=1)).strftime("%m")
        day  = (time - timedelta(days=1)).strftime("%d")
        hour = str(int(time.strftime("%H")) + 24)
    return wday, year, mon, day, hour

def main():
    mdl = importlib.import_module('rjsched.RecordJob' + scheduler)
    cls = getattr(mdl, 'RecordJob' + scheduler.capitalize())
    rec = cls()

    chinfo = rec.get_channel_info().get('channel', {})

    args = docopt(__doc__)
    if args.get('add'):
        """
        録画ジョブを追加する
        """
        if args.get('--repeat'):
            repeat = args.get('--repeat')[0]
        else:
            repeat = ''

        # 引数チェック(チャンネル)
        ch = args.get('CH', '')
        if not ch.isdecimal():
            print('invalid Channel: {}'.format(ch))
            sys.exit(1)

        # 引数チェック(開始時刻)
        date_ = args.get('DATE', '')
        time_ = args.get('TIME', '')
        begin = cliutil.parse_start_time(
            date_, time_, wormup_sec, day_change_hour)
        if not begin:
            print('Invalid date, time: {} {}'.format(date_, time_))
            sys.exit(1)

        # 引数チェック(録画時間)
        #rectime_str = args.get('RECORDINGTIME', default_rectime)
        rectime_str = args.get('RECORDINGTIME')
        if not rectime_str:
            rectime_str = default_rectime

        rectime = cliutil.parse_time(rectime_str)
        if not rectime:
            print('Invalid recording time, time: {}'.format(rectime))
            sys.exit(1)

        name = args.get('NAME', '')
        if not name:
            print('Invalid name')

        jid = rec.add(ch, args.get('NAME'), begin, rectime, repeat)
        if jid:
            jobinfo = rec.get_job_info(jid=jid)
            print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

    elif args.get('del'):
        """
        録画ジョブを削除する
        """
        jid = args.get('JOBID')[0]

        # 削除対象ジョブを表示
        jobinfo = rec.get_job_info(jid)
        if not jobinfo:
            print('no such jobid: {}'.format(jid))
            sys.exit(1)

        print('REMOVE JOB:')
        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

        rec.remove(jid)

        print('\nCURRENT JOBS:')
        jobinfo = rec.get_job_info()
        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

    elif args.get('list'):
        """
        スケジュールされた録画ジョブを一覧表示する
        """
        date = None
        date_str = args.get('DATE')
        if date_str:
            date = cliutil.parse_date(date_str, day_change_hour)
            if not date:
                print('invalit format:', s_date)
                sys.exit(1)
        jobinfo = rec.get_job_info(date=date)

        print_joblist(jobinfo, chinfo, day_change_hour, wormup_sec)

    elif args.get('show'):
        """
        引数に指定されたIDのジョブを表示する
        """
        jid = args.get('JOBID')[0]
        jobinfo = rec.get_job_info(jid=jid)
        if jobinfo:
            print_job_information(
                jobinfo,
                chinfo,
                dateline=day_change_hour,
                wormup=wormup_sec)

    elif args.get('modbegin'):
        """
        登録済み録画ジョブの開始時刻を変更する
        """
        jid = args.get('JOBID')[0]

        if args.get('DELTATIME'):
            # 相対時刻で変更
            delta = cliutil.parse_time_delta(args.get('DELTATIME'))
            if not delta:
                print('invalid DELTATIME: {}'.format(args.get('DELTATIME')))
                sys.exit(1)
            joblist = rec.change_begin(jid, delta=delta)
        else:
            # 絶対時刻で変更
            d = args.get('DATE')
            t = args.get('TIME')
            begin = check_start_time(d, t)
            if not begin:
                print('invalid DATE TIME: {} {}'.format(d, t))
                sys.exit(1)
            joblist = rec.change_begin(jid, begin)

        if joblist:
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec,
                '(Start time changed)')
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modrectime'):
        """
        登録済み録画ジョブの録画時間を再設定する。
        """
        jid = args.get('JOBID')[0]

        rectime_str = args.get('RECORDINGTIME')
        m = re.search(r'.*(\+|-)', rectime_str)
        if m:
            # 現在の録画時間からの差分で変更
            delta = cliutil.parse_time_delta(rectime_str)
            if not delta:
                print('invalid RECORDINGTIME: {}'.format(rectime_str))
                sys.exit(1)
            joblist = rec.change_rectime(jid, delta=delta)
        else:
            # 指定の録画時間で変更
            rectime = cliutil.parse_time(rectime_str)
            if not rectime:
                print('invalid RECORDINGTIME: {}'.format(rectime_str))
                sys.exit(1)
            joblist = rec.change_rectime(jid, rectime)

        if joblist:
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec,
                '(Recording time changed)')
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modch'):
        """
        登録済み録画ジョブのチャンネルを再設定する。
        """
        jid = args.get('JOBID')[0]

        ch = args.get('CH')
        if ch.isdigit():
            joblist = rec.change_channel(jid, ch)
        else:
            print('invalid channel: {}'.format(ch))
            sys.exit(1)

        if joblist:
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec,
                '(channel changed)')
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('modname'):
        """
        登録済み録画ジョブの番組名を再設定する。
        """
        jid = args.get('JOBID')[0]

        name = args.get('NAME')
        joblist = rec.change_name(jid, name)

        if joblist:
            print_joblist([joblist[0]], chinfo, day_change_hour, wormup_sec)
            print_joblist([joblist[1]], chinfo, day_change_hour, wormup_sec,
                '(channel changed)')
        else:
            print('no such job: {}'.format(jid))
            sys.exit(1)

    elif args.get('setrep') or args.get('unsetrep'):
        """
        リピート条件をセット/アンセット
        """
        repeat_flag = ['weekly', 'daily', 'weekday', 'asadora']
        if args.get('setrep'):
            repeat = args.get('TYPE')
            if repeat.lower() not in repeat_flag:
                print('setrep TYPE:', ', '.join(repeat_flag))
                sys.exit(1)
            message = '(Set repeat flag)'
        else:
            # アンセット
            repeat = ''
            message = '(Unset repeat flag)'

        jid = args.get('JOBID')[0]

        origin = rec.get_job_info(jid=jid)[0]
        if not origin:
            print('No such jobid:', ', '.join(jid))
            sys.exit(1)

        rec.change_repeat(origin, repeat)
        changed = rec.get_job_info(jid=jid)[0]

        # 変更後のジョブ情報を表示
        print_joblist([changed], chinfo, day_change_hour, wormup_sec, message)

    elif args.get('listch'):
        """
        テレビ局名とチャンネル番号の一覧を表示する
        """
        print('  Ch: TV station name')
        print(' ---- ----------------')
        for name, num in sorted(chinfo.items(), key=lambda x: x[0]):
            print('{:>4}: {}'.format(name, num))

"""
main
"""
main()
